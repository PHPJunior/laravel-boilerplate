<?php

/**
 * Global helpers file with misc functions.
 */
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('getLanguageLinePercentage')){

    function getLanguageLinePercentage( $group ){
        $count = 0;

        $language_line = \Spatie\TranslationLoader\LanguageLine::where('group' , $group )->get();

        $language = \App\Models\Setting\Language\Language::pluck('locale_code');

        foreach ($language as $key => $value){
            foreach ($language_line as $line){
                if(array_has( $line->text , $value ) && $line->text[$value]){
                    $count += 1 ;
                }
            }
        }

        $total_language_line = count( $language ) * count($language_line) ;

//        return $count.' / '.$total_language_line;

        return intval(( 100 * $count ) / $total_language_line );
    }

}

if (! function_exists('getLanguagePercentage')){
    function getLanguagePercentage($language){
        $count = 0 ;

        $language_line = \Spatie\TranslationLoader\LanguageLine::all();

        foreach ($language_line as $line){
            if(array_has( $line->text , $language ) && $line->text[$language]){
                $count += 1 ;
            }
        }

        return  intval(( 100 * $count ) / count($language_line)) ;

    }
}